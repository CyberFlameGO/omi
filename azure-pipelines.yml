trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - CHANGELOG.md
    - LICENSE
    - README.md

stages:
- stage: Build
  jobs:

  - job: Linux
    pool:
      vmImage: ubuntu-18.04
    strategy:
      matrix:
        CentOS7:
          distribution: centos7
        CentOS8:
          distribution: centos8
        Debian8:
          distribution: debian8
        Debian9:
          distribution: debian9
        Debian10:
          distribution: debian10
        Fedora31:
          distribution: fedora31
        Fedora32:
          distribution: fedora32
        Ubuntu16.04:
          distribution: ubuntu16.04
        Ubuntu18.04:
          distribution: ubuntu18.04

    steps:
    - script: |
        echo "'$(Build.Reason)'"
        echo "'$(Build.SourceBranch)'"
        echo "'$(Build.SourceVersionMessage)'"

    - script: echo hi
      condition: eq(variables['Build.Reason'], 'IndividualCI')

    - script: echo hi
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/main')

    - script: echo hi
      condition: startsWith(variables['Build.SourceVersionMessage'], 'release ')

    - script: echo hi
      condition: >-
        and(
          succeeded(),
          eq(variables['Build.Reason'], 'IndividualCI'),
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceVersionMessage'], 'release ')
        )

    - script: ./build.py $(distribution) --docker
      env:
        OMI_BUILDVERSION_BUILDNR: $(Build.BuildId)
      displayName: Build

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: Unix/build-$(distribution)/lib/libmi.so
        artifactName: $(distribution)-libmi

  - job: macOS
    pool:
      vmImage: macOS-10.15

    steps:
    - script: ./build.py macOS
      env:
        OMI_BUILDVERSION_BUILDNR: $(Build.BuildId)
      displayName: Build

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: Unix/build-macOS/lib/libmi.dylib
        artifactName: macOS-libmi

- stage: Publish
  jobs:
  - job: Publish
    pool:
      vmImage: ubuntu-18.04

    steps:
    - script: |
        RELEASE_TAG="$( ./release.py --print-tag )"
        echo "Derived release tag is ${RELEASE_TAG}"
        echo "##vso[task.setvariable variable=ReleaseTag]${RELEASE_TAG}"
      displayName: Generate the tag number from omi.version

    - task: DownloadPipelineArtifact@2
      inputs:
        source: current
        path: $(Build.ArtifactStagingDirectory)

    - script: ./release.py --pipeline-artifacts "$(Build.ArtifactStagingDirectory)"
      displayName: Rename the published artifacts for the GitHub release assets

    - task: GitHubRelease@0
      inputs:
        gitHubConnection: GitHub Release
        repositoryName: $(Build.Repository.Name)
        action: create
        target: $(Build.SourceVersion)
        tagSource: manual
        tag: $(ReleaseTag)
        assets: $(Build.ArtifactStagingDirectory)/*
        addChangeLog: true
        compareWith: lastFullRelease
      condition: >-
        and(
          succeeded(),
          eq(variables['Build.Reason'], 'IndividualCI'),
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceVersionMessage'], 'release ')
        )
